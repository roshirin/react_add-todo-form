{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","classNames","TodoList","todos","map","findUser","users","userId","find","initialTodoList","usersFromServer","App","useState","titleInput","setTitleInput","userIdSelect","setUserIdSelect","preparedTodoList","setPreparedTodoList","isTitleError","setIsTitleError","isUserError","setIsUserError","action","method","onSubmit","event","preventDefault","isNoTitle","trim","isNoUser","validateForm","todoList","usedIds","sort","a","b","length","getNewTodoId","currentList","type","placeholder","value","onChange","target","Number","disabled","person","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94239738.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { FC } from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { PreparedTodo } from '../../types/PreparedTodo';\n\ntype Props = {\n  todo: PreparedTodo;\n};\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={\n        classNames('TodoInfo', {\n          'TodoInfo--completed': completed,\n        })\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user\n        ? <UserInfo user={user} />\n        : <span>Unknown user</span>}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { PreparedTodo } from '../../types/PreparedTodo';\n\ntype Props = {\n  todos: PreparedTodo[];\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import { useState, FormEvent, ChangeEvent } from 'react';\nimport './App.scss';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { PreparedTodo } from './types/PreparedTodo';\nimport { User } from './types/User';\n\nconst findUser = (users: User[], userId: number) => {\n  return users.find(user => user.id === userId) || null;\n};\n\nconst getNewTodoId = (todoList: PreparedTodo[]) => {\n  const usedIds = todoList.map(todo => todo.id).sort((a, b) => a - b);\n  const largestId = usedIds[usedIds.length - 1];\n  const newId = largestId + 1;\n\n  return newId;\n};\n\nconst initialTodoList: PreparedTodo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: findUser(usersFromServer, todo.userId),\n}));\n\nexport const App = () => {\n  const [titleInput, setTitleInput] = useState('');\n  const [userIdSelect, setUserIdSelect] = useState(0);\n  const [preparedTodoList, setPreparedTodoList] = useState(initialTodoList);\n  const [isTitleError, setIsTitleError] = useState(false);\n  const [isUserError, setIsUserError] = useState(false);\n\n  const handleTitleEnter = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitleInput(event.target.value);\n\n    if (isTitleError) {\n      setIsTitleError(false);\n    }\n  };\n\n  const handleUserSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    const value = Number(event.target.value);\n\n    setUserIdSelect(value);\n\n    if (isUserError === true) {\n      setIsUserError(false);\n    }\n  };\n\n  const validateForm = () => {\n    const isNoTitle = !titleInput.trim();\n    const isNoUser = !userIdSelect;\n\n    if (isNoTitle || isNoUser) {\n      if (isNoTitle) {\n        setIsTitleError(true);\n      }\n\n      if (isNoUser) {\n        setIsUserError(true);\n      }\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const clearForm = () => {\n    setTitleInput('');\n    setUserIdSelect(0);\n  };\n\n  const handleSubmit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    const id = getNewTodoId(preparedTodoList);\n    const user = findUser(usersFromServer, userIdSelect);\n\n    setPreparedTodoList(currentList => (\n      [\n        ...currentList,\n        {\n          id,\n          title: titleInput,\n          completed: false,\n          user,\n        },\n      ]\n    ));\n\n    clearForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={titleInput}\n              onChange={handleTitleEnter}\n            />\n          </label>\n\n          {isTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n\n            <select\n              data-cy=\"userSelect\"\n              value={userIdSelect}\n              onChange={handleUserSelect}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n\n              {usersFromServer.map(person => (\n                <option\n                  value={person.id}\n                  key={person.id}\n                >\n                  {person.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {isUserError && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={preparedTodoList} />\n    </div>\n  );\n};\n","export default [\n  {\n    userId: 1,\n    id: 1,\n    title: 'delectus aut autem',\n    completed: false,\n  },\n  {\n    userId: 1,\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n  },\n  {\n    userId: 2,\n    id: 3,\n    title: 'fugiat veniam minus',\n    completed: false,\n  },\n  {\n    userId: 2,\n    id: 4,\n    title: 'et porro tempora',\n    completed: true,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
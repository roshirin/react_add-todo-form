{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","userId","title","completed","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","App","initialTodoList","todosFromServer","usersFromServer","find","useState","titleInput","setTitleInput","userIdSelect","setUserIdSelect","preparedTodoList","setPreparedTodoList","titleError","setTitleError","userError","setUserError","handleTodoAdd","noTitle","noUser","validateForm","todoList","usedIds","sort","a","b","freeId","findIndex","usId","index","length","getNewTodoId","person","currentList","newList","push","action","method","onSubmit","event","preventDefault","type","placeholder","value","onChange","target","Number","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a2b25f2.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    userId: 1,\n    id: 1,\n    title: 'delectus aut autem',\n    completed: false,\n  },\n  {\n    userId: 1,\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n  },\n  {\n    userId: 2,\n    id: 3,\n    title: 'fugiat veniam minus',\n    completed: false,\n  },\n  {\n    userId: 2,\n    id: 4,\n    title: 'et porro tempora',\n    completed: true,\n  },\n];\n","import { FC } from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { PreparedTodo } from '../../types/PreparedTodo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: PreparedTodo;\n};\n\nexport const TodoInfo: FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={\n        classNames('TodoInfo',\n          { 'TodoInfo--completed': completed })\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user\n        ? <UserInfo user={user} />\n        : <span>Unknown user</span>}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { PreparedTodo } from '../../types/PreparedTodo';\n\ntype Props = {\n  todos: PreparedTodo[];\n};\n\nexport const TodoList: FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { PreparedTodo } from './types/PreparedTodo';\n\nconst getNewTodoId = (todoList: PreparedTodo[]) => {\n  const usedIds = todoList.map(todo => todo.id).sort((a, b) => a - b);\n  const freeId = usedIds.findIndex((usId, index) => usId !== index + 1);\n  const newId = freeId !== -1 ? freeId + 1 : usedIds.length + 1;\n\n  return newId;\n};\n\nexport const App = () => {\n  const initialTodoList: PreparedTodo[] = todosFromServer.map(todo => ({\n    ...todo,\n    user: usersFromServer.find(user => user.id === todo.userId) || null,\n  }));\n\n  const [titleInput, setTitleInput] = useState('');\n  const [userIdSelect, setUserIdSelect] = useState(0);\n  const [preparedTodoList, setPreparedTodoList] = useState(initialTodoList);\n  const [titleError, setTitleError] = useState(false);\n  const [userError, setUserError] = useState(false);\n\n  const handleTitleEnter = (value: string) => {\n    setTitleInput(value);\n    if (titleError === true) {\n      setTitleError(false);\n    }\n  };\n\n  const handleUserSelect = (value: number) => {\n    setUserIdSelect(value);\n    if (userError === true) {\n      setUserError(false);\n    }\n  };\n\n  const validateForm = () => {\n    const noTitle = titleInput === '';\n    const noUser = userIdSelect === 0;\n\n    if (noTitle || noUser) {\n      if (noTitle) {\n        setTitleError(true);\n      }\n\n      if (noUser) {\n        setUserError(true);\n      }\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const clearForm = () => {\n    setTitleInput('');\n    setUserIdSelect(0);\n  };\n\n  const handleTodoAdd = () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    const id = getNewTodoId(preparedTodoList);\n    const user = usersFromServer\n      .find(person => person.id === userIdSelect) || null;\n\n    setPreparedTodoList(currentList => {\n      const newList = [...currentList];\n\n      newList.push({\n        id,\n        title: titleInput,\n        completed: false,\n        user,\n      });\n\n      return newList;\n    });\n\n    clearForm();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={(event) => {\n          event.preventDefault();\n          handleTodoAdd();\n        }}\n      >\n        <div className=\"field\">\n          <label>\n            {'Title: '}\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={titleInput}\n              onChange={event => handleTitleEnter(event.target.value)}\n            />\n          </label>\n          {titleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            {'User: '}\n            <select\n              data-cy=\"userSelect\"\n              value={userIdSelect}\n              onChange={event => handleUserSelect(Number(event.target.value))}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n\n              {usersFromServer.map(person => (\n                <option\n                  value={person.id}\n                  key={person.id}\n                >\n                  {person.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {userError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={preparedTodoList} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}